buildscript {
    ext {
        springBootVersion = '2.1.5.RELEASE'

    }
    repositories {
        mavenCentral()
        mavenLocal()
        jcenter()

    }
    dependencies {
        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:4+"
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'io.spring.dependency-management'
apply plugin: "jacoco"
apply plugin: 'maven'

ext {
    springCloudVersion = 'Finchley.SR1'
}

group = 'org.dentinger.kafka'
version = '0.0.1'


sourceCompatibility = 1.8

repositories {
    repositories {
        mavenCentral()
        mavenLocal()
        jcenter()

    }
}



dependencies {


    implementation('org.springframework.kafka:spring-kafka:2.2.5.RELEASE')
    implementation ('org.springframework:spring-context:5.1.6.RELEASE')
    implementation ('org.springframework.boot:spring-boot-autoconfigure:2.1.4.RELEASE')
    implementation ('org.slf4j:slf4j-api:1.7.25')
    implementation ('org.slf4j:jul-to-slf4j:1.7.25')


    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile("org.mockito:mockito-core:2.23.4")
    testCompile("org.assertj:assertj-core:3.11.1")

    testImplementation 'org.hamcrest:hamcrest:2.1'
    testImplementation 'org.springframework.kafka:spring-kafka-test:2.2.5.RELEASE'
    testImplementation ('org.springframework.boot:spring-boot-test-autoconfigure:2.1.4.RELEASE')
    testImplementation("org.yaml:snakeyaml:1.23")
    testImplementation 'ch.qos.logback:logback-core:1.2.3'
    testImplementation 'ch.qos.logback:logback-classic:1.2.3'
}

test {
    testLogging {
        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                println "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
            }
        }
    }
}

test.finalizedBy(project.tasks.jacocoTestReport)

jacocoTestReport {
    reports {
        html {
            enabled true
        }
        xml {
            enabled true
        }
    }
}


task sourceJar(type: Jar, dependsOn: classes) {
    from sourceSets.main.allSource
}

task printVersion {
    doLast {
        println project.version
    }
}

task writeVersionFile() {
    doLast {
        new File(String.format("%s/%s", buildDir, 'version.txt')).write(project.version)
    }
}

tasks.withType(JavaCompile) {
    options.encoding = "utf-8"
}

